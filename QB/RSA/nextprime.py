import gmpy2

c = 6027704939934795526809476320408984749353451163184148193613218899917989403800738729505135647560822568147775955030636790796412038749080589962404088890138
n = 2345049742327685796181532105032554795628696111708534285951012187089560814230641663133312117797131139088986342455315166062482479446527815702735474197358418746066993291802284464812612727625991647573889402281825863578807474887341632160586307943897790827019291411639756252138594856687013363652094621849674259604512491449809337670874218320926522274379234396955495643125680407916326561528774056618181536326260093822819468635513422755218190798616168156924793527386350080400722536575372660262573683231490166520738579903818495107264328324326819989553511070207494208500239603511665056894947107356065440333537271115434438827753
e = 1560967245790387854530279132085915310737094193704812456970549221459036227794862560384548159924112528879771688534015861357630951162558357151823378870345945435342412220708167081427844035498174919749839232806280901968067512188264340755833308035745702731211924571583963089915893479992177245815565483658484702813753029786985027579475059989141119719224961817402605977566829967197490932672021566512826377376988752959467389833419735737545201988916590880487156074463948048461415870071893002222885078350961871888123567241990517365430474025391208925638731208820904957752596249597885523540692851123131898267246576902438472358221

# seek the first prime in certain bit range
def cal_firstPrime(n):
    start = gmpy2.mpz(1) << n
    first_n_bit_prime = gmpy2.next_prime(start)
    return first_n_bit_prime

print(cal_firstPrime(1380))

# a = gmpy2.invert(x,b), a,x are claimed, seek for b
def find_b(a, x, near_b, s_range):
    # 向下遍历
    for b in range(near_b - s_range, near_b+1):
        if gmpy2.invert(x, b) == a:
            return b
    return None

a = e
x = cal_firstPrime(1380)
near_b = n
s_range = 10000000

b = find_b(a, x, near_b, s_range)
if b:
    print(b)