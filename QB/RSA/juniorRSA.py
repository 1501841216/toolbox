from gmpy2 import gmpy2

import myRSA
from Crypto.Util.number import *

n = 1224562468550864572988516321107388462006452125881847529675226398144888628055678744854491489016309262856785169494723943649344959507818155642772331582922466943539371681776924160647697558836379614689120727659593775446187326222964118917872973684996317614900715927751822277949264379149585370840318817143291878609357893969588131470982041272505875501444442064552286330626234504767040724907034678080283717062342383737341651784574675215207283219694413200065153603535550259
e = 47356701171507751941853094934330097161634963503549196148254287987823089762869775349307331223083118848869825102126184149696632299476124764277876323238594318983922914255635452587035212905468593961720866809724369270149104325019013500377581
enc = 307839781648837102719329833689146078918113606357673952357833605392673923316706392387378621203382529480917019155723632239435123748698548640308486267420983085309284306889248702165586731118889200017606360233948688879034822132551452439147516062116990766999765714755923073387252339782026780490661436777023426366620269445376047876173655782230659201893151372247389482285331969025687842851498151565880029377050013378302485301558801016888957357366922840214729734193614497

abc = e // 65537

print(int(abc))

def gen(bits):
    while True:
        a = getPrime(bits)
        b = getPrime(bits)
        c = getPrime(bits)
        p = (a << (2*bits)) + (b << bits) + c
        q = (c << (2*bits)) + (a << bits) + b
        if isPrime(p) and isPrime(q):
            break
    n = p * q
    e = 65537 * a * b * c
    return n,e
#
# a = getPrime(256)
# print(a)
# print(bin(a))
#
# print(bin(a << (2*256)))
# print(bin(a << 256))
#
#
# print(int(abc))
#
# cube_abc = abc ** (1/3)
# print(format(cube_abc,'.10f'))
# print(int(cube_abc ** (1/3)))
# print(len(str(cube_abc)))

def fermat_method(nn):
    a = gmpy2.isqrt(nn)+1
    k = a**2 -n
    while not gmpy2.is_square(k):
        a += 1
        k = a**2 - n
    return a - gmpy2.isqrt(k), a + gmpy2.isqrt(k)


# p,q = fermat_method(n)
# print(p + '%d' + q)
# while True:
#     gen(256)
print(myRSA.query_factors(e))